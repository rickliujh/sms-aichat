# Managed by the build-on-aws/terraform-samples/modules/bootstrap-cicd-github-actions
# module. While changes won't be overwritten unless you run it locally and commit, 
# it is recommended not to make changes to this file directly.
name: "Test and Build Workflows"
run-name: ${{ github.actor }} Test and Build the image that push to ECR

on:
  push:
    branches:
      - main 
  
  pull_request:
    branches:
      - main  

permissions:
  id-token: write   # This is required for requesting the JWT to interact with AWS
  contents: read    # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    # Check out the code
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5 
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python
      run: uv python install

    - name: Install the project
      run: uv sync --all-extras --dev

    - name: Linting
      run: make lint

    # - name: Testing
    #   run: make test
  
    # Set up the AWS credentials for this repo
    - name: Configure AWS credentials PR (ecr-push-only)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ECR }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build image
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      run: |
        make expt
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Check out the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Set up Terraform for the pipeline
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}


    # Set up the AWS credentials for this repo
    - name: Configure AWS credentials PR (read-only)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_PLAN }}
        aws-region: ${{ vars.AWS_REGION }}

    # Initialize Terraform
    - name: Terraform init
      id: init
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: terraform init -no-color
      working-directory: terraform
      continue-on-error: true

    # Ensure code is formatted correctly
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check -no-color
      working-directory: terraform
      continue-on-error: true

    # Validate the terraform code is valid
    - name: Terraform validate
      id: validate
      run: terraform validate -no-color
      working-directory: terraform
      continue-on-error: true

    # Generate the plan
    - name: Terraform plan
      id: plan
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        TF_VAR_image_tag: ${{ github.sha }}
      run: |
        terraform plan -no-color -out=tfplan 2> error.log || export PLAN_EXIT_CODE=$?
        
        if [ $PLAN_EXIT_CODE -eq 1 ]; then
          TERRAFORM_ERRORS=$(cat error.log)
          
          # Ensure to use a string that won't occur in the output
          echo "plan_output<<ABCDEFGH" >> $GITHUB_OUTPUT
          echo "## Terraform Plan" >> $GITHUB_OUTPUT
          echo "<details><summary>Show Errors</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '\`\`\`' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_ERRORS" >> $GITHUB_OUTPUT
          echo '\`\`\`' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "ABCDEFGH" >> $GITHUB_OUTPUT
          exit 1
        else
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          # Ensure to use a string that won't occur in the output
          echo "plan_output<<ABCDEFGH" >> $GITHUB_OUTPUT
          echo "## Terraform Plan" >> $GITHUB_OUTPUT
          echo "<details><summary>Show Plan</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '\`\`\`' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '\`\`\`' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "ABCDEFGH" >> $GITHUB_OUTPUT

          exit 0
        fi
      working-directory: terraform
      continue-on-error: true

    # Write the status of prior steps as a comment on the PR
    - name: Update PR with plan output and build status
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const build_summary = `|Step|Status|
            |:---|:---|
            |üñå - Format and Style|\`$${{ steps.fmt.outcome }}\`|"
            |‚öôÔ∏è - Initialization|\`$${{ steps.init.outcome }}\`|"
            |ü§ñ - Validation|\`$${{ steps.validate.outcome }}\`|"
            |üìñ - Plan|\`$${{ steps.plan.outcome }}\`|`;

          const plan_output = `${{ steps.plan.outputs.plan_output }}`;

          const commit_details = `*Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // Build the output message
          const output = `${build_summary}\n\n${plan_output}\n\n${commit_details}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    # After posting the PR output / status as a comment, exit with failure if any step failed
    - name: Exit based on status of fmt, init, and validate
      if: steps.init.outcome == 'failure' || steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure'
      run: |
        echo Init: ${{ steps.init.outcome }}
        echo Format: ${{ steps.fmt.outcome }}
        echo Validate: ${{ steps.validate.outcome }}
        exit 1

    # Set up the AWS credentials to allow changes if this is on the main branch
    - name: Configure AWS credentials PR (lambda-only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_APPLY }}
        aws-region: ${{ vars.AWS_REGION }}
        role-chaining: true


    # Only apply if this is on the main branch (after merging)
    - name: Terraform Apply
      id: apply 
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        TF_VAR_image_tag: ${{ github.sha }}
      run: terraform apply -auto-approve -input=false
      working-directory: terraform
